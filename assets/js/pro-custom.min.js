const AutoTranslator = function (t, n) { const a = t.locoConf || {}, o = t.extradata || {}; let e = !1; const { ajax_url: s, nonce: r, ATLT_URL: i, extra_class: l, api_key: d, dashboard_url: c } = o, u = a.conf.podata; let h = ""; if (a && a.conf && a.conf.project && a.conf.project.bundle) { if (a.conf.project.bundle.startsWith("theme.")) h = a.conf.project.domain || ""; else { const t = a.conf.project.bundle.match(/^[^.]+\.(.*?)(?=\/)/); h = t ? t[1] : "" } } function g() { const { conf: t } = a, { locale: o, project: s } = t; m(s, o); 0 === n("#loco-editor nav").find("#cool-auto-translate-btn").length && function () { const t = n("#loco-editor nav").find("#cool-auto-translate-btn"); t.length > 0 && t.remove(); const a = n("#loco-editor nav").find("#loco-actions"), o = n('<fieldset><button id="cool-auto-translate-btn" class="button has-icon icon-translate">Auto Translate</button></fieldset>'); a.append(o) }(), function () { const t = { chrome: extradata.chromeAi_preview, error: extradata.error_preview }, a = "https://locoaddon.com/docs/", o = n => i + "assets/images/" + t[n], e = (o("docs"), [{ name: "Chrome Built-in AI", icon: "chrome", info: "https://developer.chrome.com/docs/ai/translator-api", doc: `${a}how-to-use-chrome-ai-auto-translations/?utm_source=atlt_plugin&utm_medium=inside&utm_campaign=docs&utm_content=popup_chrome_pro`, btn: `\n                    <button id="ChromeAiTranslator_settings_btn" class="atlt-provider-btn translate">Translate</button>\n                    <button id="atlt-chromeai-disabled-message" class="atlt-provider-btn error d-none">\n                        <img src="${o("error")}" alt="error" style="height:16px; vertical-align:middle; margin-right:5px;">\n                        View Error\n                    </button>\n                    <div id="atlt-chromeai-disabled-message-content" style="display:none;"></div>\n                ` }]), s = `\n            <div class="atlt-provider-modal" id="atlt-dialog" title="Step 2 - Select Translation Provider" style="display:none;">\n                <table class="atlt-provider-table">\n                    <thead>\n                        <tr><th>Name</th><th>Translate</th></tr>\n                    </thead>\n                    <tbody>${e.map((t => `\n            <tr>\n                <td class="atlt-provider-name">\n                    <a href="${t.info}" target="_blank">\n                        <img src="${o(t.icon)}" class="atlt-provider-icon" alt="${t.name}">\n                    </a>\n                    ${t.name}\n                </td>\n                <td>${t.btn}</td>\n               \n            </tr>\n        `)).join("")}</tbody>\n                </table>\n            </div>\n        `; n("body").append(s) }(), n("#cool-auto-translate-btn").on("click", _), n("button.icon-robot[data-loco='auto']").on("click", f), n("#ChromeAiTranslator_settings_btn").on("click", (function () { !async function (t) { var a = t.lang ? t.lang : null; switch (a) { case "bel": defaultlang = "be"; break; case "he": defaultlang = "iw"; break; case "snd": defaultlang = "sd"; break; case "jv": defaultlang = "jw"; break; case "nb": case "nn": defaultlang = "no"; break; default: defaultlang = a }let o = n("div#ChromeAiTranslator-widget-model.ChromeAiTranslator-widget-container"); o.find(".atlt_actions > .atlt_save_strings").prop("disabled", !0), o.find(".atlt_stats").hide(), n("#atlt-dialog").dialog("close"), o.fadeIn("slow"), e && n("#ChromeAiTranslator-widget-model").find(".atlt_save_strings").prop("disabled", !1) }(o) })), n(".atlt_save_strings").on("click", p) } function m(t, n) { const { domain: a } = t || {}, { lang: o, region: e } = n; return t ? `${a}-${o}-${e}` : `temp-${o}-${e}` } function p() { let t = [], o = this.getAttribute("data-type"), e = 0, s = 0; const r = { '"% s"': '"%s"', '"% d"': '"%d"', '"% S"': '"%s"', '"% D"': '"%d"', "% s": " %s ", "% S": " %s ", "% d": " %d ", "% D": " %d ", "٪ s": " %s ", "٪ S": " %s ", "٪ d": " %d ", "٪ D": " %d ", "٪ س": " %s ", "%S": " %s ", "%D": " %d ", "% %": "%%" }, i = /(\%\s*\d+\s*\$?\s*[a-z0-9])/gi; n("." + o + "-widget-body").find(".atlt_strings_table tbody tr").each((function () { const a = n(this).find("td.source").text(), o = v(n(this).find("td.target").text(), r), l = v(a, r), d = o.replace(i, (function (t) { return t.replace(/\s/g, "").toLowerCase() })), c = l.replace(i, (function (t) { return t.replace(/\s/g, "").toLowerCase() })); e += c.length, s += c.split(/\s+/).length, t.push({ source: c, target: d }) })); const l = n(this).closest(".atlt_custom_model"), d = l.data("translation-provider"), c = l.data("translation-time"), { lang: u, region: g } = a.conf.locale, m = g ? `${u}_${g}` : u, p = { time_taken: c, translation_provider: d, character_count: t.reduce(((t, n) => t + n.source.length), 0), string_count: t.length, pluginORthemeName: h, target_language: m }; var f, _ = n(this).parents(".atlt_custom_model").find("#project_id").val(); !function (t, n, a) { if (t && t.length > 0) { const o = 2500; for (let e = 0; e < t.length; e += o) { b(t.slice(e, e + o), n, `-part-${Math.ceil(e / o)}`, a) } } }(t, _, p), n(".atlt_custom_model").fadeOut("slow"), n("html").addClass("merge-translations"), f = setInterval((function () { var t = n(".loco-modal"), a = n(".loco-modal #loco-apis-batch"); if (t.length && t.attr("style").indexOf("none") <= -1 && t.find("#loco-job-progress").length) { n("html").removeClass("merge-translations"), a.find("a.icon-help, a.icon-group, #loco-job-progress").hide(), a.find("select#auto-api").hide(); var o = n("select#auto-api option[value='loco_auto']").prop("selected", "selected"); a.find("select#auto-api").val(o.val()), t.find(".ui-dialog-titlebar .ui-dialog-title").html("Step 3 - Add Translations into Editor and Save"), a.find("button.button-primary span").html("Start Adding Process"), a.find("button.button-primary").on("click", (function () { n(this).find("span").html("Adding...") })), t.addClass("addtranslations"), n(".noapiadded").remove(), a.find("form").show(), a.removeClass("loco-alert"), clearInterval(f) } }), 200) } function f(t) { if (void 0 !== t.originalEvent) var a = setInterval((function () { var t = n(".loco-modal"), o = t.find("#loco-apis-batch"), e = t.find(".ui-dialog-titlebar .ui-dialog-title"); o.length && !t.is(":hidden") && (t.removeClass("addtranslations"), o.find("select#auto-api").show(), o.find("a.icon-help, a.icon-group").show(), o.find("#loco-job-progress").show(), e.html("Auto-translate this file"), o.find("button.button-primary span").html("Translate"), 1 === o.find("select#auto-api option").length && (o.find(".noapiadded").remove(), o.removeClass("loco-alert"), o.find("form").hide(), o.addClass("loco-alert"), e.html("No translation APIs configured"), o.append("<div class='noapiadded'>\n                            <p>Add automatic translation services in the plugin settings.<br>or<br>Use <strong>Auto Translate</strong> addon button.</p>\n                            <nav>\n                                <a href='http://locotranslate.local/wp-admin/admin.php?page=loco-config&amp;action=apis' class='button button-link has-icon icon-cog'>Settings</a>\n                                <a href='https://localise.biz/wordpress/plugin/manual/providers' class='button button-link has-icon icon-help' target='_blank'>Help</a>\n                                <a href='https://localise.biz/wordpress/translation?l=de-DE' class='button button-link has-icon icon-group' target='_blank'>Need a human?</a>\n                            </nav>\n                        </div>")), clearInterval(a)) }), 100) } function v(t, n, a) { return !!t && { 2: function () { for (var a in n) t = v(t, a, n[a]); return t }, 3: function () { return t.replace(RegExp(n, "g"), a) }, 0: function () { } }[arguments.length]() } function b(t, a, o, e) { const i = { action: "save_all_translations", data: JSON.stringify(t), part: o, "project-id": a, wpnonce: r, translation_data: JSON.stringify(e) }; n.ajax({ url: s, method: "POST", data: i, dataType: "json", success: function (t) { n('#loco-editor nav button[data-loco="auto"]').trigger("click") }, error: function (t, n, a) { console.error(a) } }) } function _() { n("#atlt-dialog").dialog({ dialogClass: l, resizable: !1, height: "auto", width: 400, modal: !0, draggable: !1, buttons: { Cancel: function () { n(this).dialog("close") } } }) } !function () { if (a && a.conf) { const { conf: t } = a; u.shift(); const { locale: o, project: e } = t; !function (t, a) { let { wrapperCls: o, headerCls: e, bodyCls: s, footerCls: r, modelId: i } = function (t) { let n = "", a = "", o = "", e = "", s = ""; if ("ChromeAiTranslator" === t) n = "ChromeAiTranslator-widget-container", a = "ChromeAiTranslator-widget-header", o = "ChromeAiTranslator-widget-body", e = "ChromeAiTranslator-widget-footer", s = "ChromeAiTranslator-widget-model", type = "ChromeAiTranslator"; else n = "ChromeAiTranslator-widget-container", a = "ChromeAiTranslator-widget-header", o = "ChromeAiTranslator-widget-body", e = "ChromeAiTranslator-widget-footer"; return { wrapperCls: n, headerCls: a, bodyCls: o, footerCls: e, modelId: s, type: type } }(a), d = `\n            <div id="${i}" class="modal atlt_custom_model  ${o} ${l}">\n                <div class="modal-content">\n                    <input type="hidden" id="project_id" value="${t}"> \n                    ${function (t, n) { if ("ChromeAiTranslator" === t) { return `\n        <div class="modal-header  ${n}">\n                        <span class="close">&times;</span>\n                        <h2 class="notranslate">Step 2 - Start Automatic Translation Process</h2>\n                        <div class="atlt_actions">\n                            <button class="notranslate atlt_save_strings button button-primary" data-type = "${type}" disabled="true">Merge Translation</button>\n                        </div>\n                        <div style="display:none" class="atlt_stats hidden">\n                            Wahooo! You have saved your valuable time via auto translating \n                            <strong class="totalChars"></strong> characters  using \n                            <strong>\n                                \n                                    LocoAI – Chrome AI Auto Translator\n                               \n                            </strong>\n                        </div>\n                    </div>\n                    ` } }(a, e)}   \n                    ${function (t, n) { const a = `${type}`; function o(t) { return (t = t.replace("ChromeAiTranslator", "Chrome AI")).charAt(0).toUpperCase() + t.slice(1) } const e = `<div class = "modal-scrollbar">\n        <div class="notice inline notice-info is-dismissible">\n                        Plugin will not translate any strings with HTML or special characters because ${o(a)} Translator currently does not support HTML and special characters translations.\n                        You can edit translated strings inside Loco Translate Editor after merging the translations. Only special characters (%s, %d) fixed at the time of merging of the translations.\n                    </div>\n                    <div class="notice inline notice-info is-dismissible">\n                        Machine translations are not 100% correct.\n                        Please verify strings before using on the production website.\n                    </div>\n        <div class="modal-body  ${n}">\n            <div class="atlt_translate_progress">\n                Automatic translation is in progress....<br/>\n                It will take a few minutes, enjoy ☕ coffee in this time!<br/><br/>\n                Please do not leave this window or browser tab while the translation is in progress...\n\n            <div class="progress-wrapper">\n                <div class="progress-container">\n                    <div class="progress-bar" id="myProgressBar">\n                        <span id="progressText">0%</span>\n                    </div>\n                </div>\n            </div>\n            </div>\n            <div class="atlt_translate_warning-massage">\n                <div class="warning-massage-wrapper">\n                     <button class="close-button">&times;</button>\n                     <div class="warning-massage-content"></div>\n                </div>\n            </div>\n            ${function (t) { return "ChromeAiTranslator" === t ? `<div class="translator-widget  ${t}">\n                    <h3 class="choose-lang">Translate Using Chrome Built-in AI<div class="atlt_chrome_ai"><svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 24 24"><path fill="none" stroke="#5cb85c" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="m10 7l-.516 1.394c-.676 1.828-1.014 2.742-1.681 3.409s-1.581 1.005-3.409 1.681L3 14l1.394.516c1.828.676 2.742 1.015 3.409 1.681s1.005 1.581 1.681 3.409L10 21l.516-1.394c.676-1.828 1.015-2.742 1.681-3.409s1.581-1.005 3.409-1.681L17 14l-1.394-.516c-1.828-.676-2.742-1.014-3.409-1.681s-1.005-1.581-1.681-3.409zm8-4l-.221.597c-.29.784-.435 1.176-.72 1.461c-.286.286-.678.431-1.462.72L15 6l.598.221c.783.29 1.175.435 1.46.72c.286.286.431.678.72 1.462L18 9l.221-.597c.29-.784.435-1.176.72-1.461c.286-.286.678-.431 1.462-.72L21 6l-.598-.221c-.783-.29-1.175-.435-1.46-.72c-.286-.286-.431-.678-.72-1.462z" color="#5cb85c"/></svg></div></h3>\n                     <div id="chrome_ai_translator_element"></div>\n                </div>` : "" }(t)}\n            <div class="atlt_string_container">\n                <table class="scrolldown atlt_strings_table">\n                    <thead>\n                        <th class="notranslate">S.No</th>\n                        <th class="notranslate">Source Text</th>\n                        <th class="notranslate">Translation</th>\n                    </thead>\n                    <tbody class="atlt_strings_body">\n                    </tbody>\n                </table>\n            </div>\n            <div class="notice-container"></div>\n        </div>\n        </div>`; return e }(a, s)}   \n                    ${function (t, n) { if ("ChromeAiTranslator" === t) { return ` <div class="modal-footer ${n}">\n        <div class="atlt_actions">\n            <button class="notranslate atlt_save_strings button button-primary" data-type = "${type}" disabled="true">Merge Translation</button>\n        </div>\n        <div style="display:none" class="atlt_stats">\n            Wahooo! You have saved your valuable time via auto translating \n            <strong class="totalChars"></strong> characters  using \n            <strong>\n               \n                   LocoAI – Chrome AI Auto Translator\n              \n            </strong>\n        </div>\n    </div>` } return "" }(a, r)} \n                    </div>\n                </div>`; n("body").append(d) }(m(e, o), "ChromeAiTranslator"), function (t) { var a = (o = t, o.filter((t => { return !(!t.source || t.target || (n = t.source, /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(n) || function (t) { return /<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i.test(t) }(t.source) || function (t) { return /[@^{}|<>]/g.test(t) }(t.source) || function (t) { var n = ["(?:[✀-➿]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[#-9]️?⃣|㊙|㊗|〽|〰|Ⓜ|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|🆎|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|🈚|🈯|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|‼|⁉|[▪-▫]|▶|◀|[◻-◾]|©|®|™|ℹ|🀄|[☀-⛿]|⬅|⬆|⬇|⬛|⬜|⭐|⭕|⌚|⌛|⌨|⏏|[⏩-⏳]|[⏸-⏺]|🃏|⤴|⤵|[←-⇿])"]; return t.match(n.join("|")) }(t.source) || t.source.includes("#") || (function (t) { /%s|%d/g.test(t) }(t.source), 0))); var n }))); var o; a.length > 0 ? function (t, a) { let o = "", e = 0, s = 1, r = ""; if (t) { for (const n in t) if (t.hasOwnProperty(n)) { const i = t[n].source.trim(); if ("" !== i && "ChromeAiTranslator" == a) { o += `<tr id="${n}"><td>${s}</td><td class="notranslate source">${y(i)}</td>`, o += "ChromeAiTranslator" == a ? `<td   ${r}  class="target translate">${i}</td></tr>` : '<td class="target translate"></td></tr>'; const t = document.createElement("div"); t.innerHTML = i, s++, e += t.innerText.length } } n(".atlt_stats").each((function () { n(this).find(".totalChars").html(e) })) } n("#" + a + "-widget-model").find(".atlt_strings_table > tbody.atlt_strings_body").html(o) }(a, type = "ChromeAiTranslator") : (n(".notice-container").addClass("notice inline notice-warning").html("There is no plain string available for translations."), n(".atlt_string_container, .choose-lang, .atlt_save_strings, .translator-widget, .notice-info, .is-dismissible").hide()) }(u) } }(); var w = document.querySelectorAll(".atlt_custom_model"); function y(t) { for (var n = [], a = t.length - 1; a >= 0; a--)n.unshift(["&#", t[a].charCodeAt(), ";"].join("")); return n.join("") } n(t).click((function (t) { t.target.closest(".modal-content"); for (var a = 0; a < w.length; a++) { var o = w[a]; n(t.target).hasClass("atlt_custom_model") && t.target === o && (o.style.display = "none", n(".container").length > 0 && n(".container").remove()) } })), n(".atlt_custom_model").find(".close").on("click", (function () { n(".container").length > 0 && n(".container").remove(), n(".atlt_custom_model").fadeOut("slow") })), n(document).ready((function () { g() })) }(window, jQuery);